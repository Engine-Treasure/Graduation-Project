- 遗传算法最大的优点在于不必去了解和操心如何寻找最优解, 而只要`否定`一些表现不好的个体就行了
- 实现过程:
    - 寻找一种对问题潜在解进行"数字化"`编码`的方案, `建立表现型与基因型的映射关系`
    - 随机初始化
    - 解码得到数据个体, 用适应度函数对每个基因个体做适应度评估
    - `选择`, `交叉`, `变异`
- 二进制编码, 简单直观, 但当个体特征比较复杂时, 需要大量编码才能精确描述, 相应的解码过程也过分繁复
- 浮点数编码, 类似 `1.2 – 3.3 – 2.0 –5.4 – 2.7 – 4.3`
- 遗传算法编码, 必须将具体问题抽象成数学模型, 突出主要矛盾, 舍弃次要矛盾. 简洁有效地解决问题
- 遗传算法包含大量可控参数, 比如进化代数, 人口数目, 选择概率, 交叉概率, 变异概率, 变异步长...
- 基本遗传算法不能收敛至全局最优解
- 基本遗传算法, 如果在选择之前, 保留当前最佳个体 (精英主义), 最终能收敛到全局最优解
- 一些编码形式:
    - 二进制编码
    - 真实值编码 (浮点数编码)
    - 整数编码
    - 排列编码 (旅行商问题)
- 种群初始化方式:
    - 随机初始化
    - 启发式初始化
- 对于整个种群使用启发式初始化, 会导致多样性的缺失. 启发式初始化应只用于设置一些优选个体, 剩余的个体用随机初始化补全
- 在一些例子中, 启发式初始化只会影响种群的初始适应度, 最终还是由解的多样性决定最优解
- 种群模型
    - 稳定状态 (增量型) - 每一代, 只生成一两个个后代, 并替换掉上一代中的一两个个体.
    - 世代型- 产生 n 个后代, 完全替换掉上一代种群
- Keep in mind when dealing with GA population:
    - The diversity of the population should be maintained otherwise it might lead to premature convergence. (保持种群多样性, 以避免过早收敛)
    - 种群规模过大, 计算缓慢; 过小, 得不到全局最优解
- GA 应该能相当高效地计算适应度值, 因为适应度的计算在 GA 运行过程中一直在进行
- 父母的选择是 GA 收敛速度的关键, 需要注意的是避免在几代中都使用相同的解, 会导致多样性的缺失, 从而导致过早收敛
- 保持良好的种群多样性对于 GA 的成功相当关键
- 父母的选择:
    - 适应度最佳选择:
        - 轮盘赌 - 到最后, 个体的适应度接近时, 退化为随机选择了
        - SUS (随机通用样例)
            - 类似于轮盘赌, 但一次选出多个值. 一次旋转, 高适应度的个体可能会被多次选择
    - 竞争选择 - 像比赛一样, 竞选出最佳的个体
    - 排名选择 - 在种群中个体的适应度相差很小的情况下 (算法即将结束), 使用最多. 每个个体按适应度高低排序, 按排名选择.
    - 随机选择 - 一般不使用
- 常用的交叉算子:
    - 单点交叉 - 随机选择一个位置, 交换两个个体该位置后的基因
    - 多点交叉 - 交换一段
    - 均匀交叉 - 每个基因都分别对待, 以决定是否交换
    - 完全算术重组 - 适用于整数编码的 GA, 按父母的权重计算子代
    - 顺序交叉 (OX1) - 适用于排列编码的 GA, 从父亲的染色体中取一段, 安排在子代的相应位置, 再从母亲的染色体中取剩余未使用的数字; 再反过来生成第二个后代
    - 其他: 部分映射交叉 (PMX), OX2, 随机交叉, 环形交叉等等

